package group1.controller;

import group1.bean.Company;
import group1.service.CompanyListingService;
import java.io.IOException;
import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

/**
 * Controller to handle all of the company entity operations.
 * @author Steve165
 */
@Controller
public class CompanyController {

    /**
     * Injection of the service to provide access to the company records.
     */
    @Inject
    private CompanyListingService compService;

    /**
     * Model and view to display the company information from the database.
     * @param id GET parameter with the id of the company to retrieve.
     * @return Model and View for displaying the company.
     */
    @RequestMapping(value = "/compScreen.htm", method = RequestMethod.GET)
    protected ModelAndView compScreen(@RequestParam("id") int id) {
        Company comps = compService.getCompany(id);
        ModelAndView mv = new ModelAndView("compScreen");
        mv.addObject("comp", comps);

        return mv;
    }

    /**
     * View to display a dynamic search of companies.
     *
     * @return compView JSP view
     */
    @RequestMapping(value = "/viewComps.htm", method = RequestMethod.GET)
    protected String viewCompanies() {
        return "compView";
    }

    /**
     * Post request to add the company to the database.
     * @param comp Company entity to insert.
     * @param result Validation result.
     * @return Redirects to the inserted company view or returns the user back
     * to the input form on error.
     */
    @RequestMapping(value = "/initFormComp.htm", method = RequestMethod.POST)
    public String addComp(@Valid @ModelAttribute("command") Company comp, BindingResult result) {
        if (result.hasErrors()) {
            return "Company";
        }

        if (comp.getId() != 0) {
            result.addError(new FieldError("command", "id", "Attempt to overwrite an existing company, ID should be 0 and autogenerated by the server"));
            return "Company";
        }

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        comp.setCreateUser(auth.getName());
        compService.saveComp(comp);
        return "redirect:compScreen.htm?id=" + comp.getId();
    }

    /**
     * Display of the company input form for a new entity.
     * @return Model and View for the new company.
     */
    @RequestMapping(value = "/Company.htm")
    protected ModelAndView inputComps() {
        ModelAndView mv = new ModelAndView("Company", "command", new Company());
        return mv;
    }

    /**
     * Hook to provide the company image from the entity given the company ID.
     * @param id Id of the company image to retrieve.
     * @param response Response to write the image data to.
     * @throws IOException If the image data cannot be written to the response stream.
     */
    @RequestMapping(value = "/companyImage.htm", method = RequestMethod.GET)
    protected void companyImage(@RequestParam("id") int id, HttpServletResponse response)
            throws IOException {
        Company comp = compService.getCompany(id);
        byte[] imageBytes = comp.getImage();
        response.setContentType("image/jpeg");
        response.setContentLength(imageBytes.length);
        response.getOutputStream().write(imageBytes);
    }
}
