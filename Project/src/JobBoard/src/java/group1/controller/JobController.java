package group1.controller;

import group1.bean.Company;
import group1.bean.Job;
import group1.service.CompanyListingService;
import group1.service.JobListingService;
import javax.inject.Inject;
import javax.validation.Valid;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

/**
 * Controller for displaying jobs.
 *
 * @author Daniel Searle <ds00148@surrey.ac.uk>
 */
@Controller
public class JobController {

    /**
     * Service to access the job listings.
     */
    @Inject
    private JobListingService jobService;

    /**
     * Service to access company information.
     */
    @Inject
    private CompanyListingService companyService;

    /**
     * Display the dynamic search form to look for jobs.
     * @return Search jsp view.
     */
    @RequestMapping(value="/search.htm", method=RequestMethod.GET)
    protected String search() {
        return "search";
    }

    /**
     * Method to display the details about a single job posting.
     * @param id Id of the job to display.
     * @return ModelAndView with the returned job set to the "job" attribute.
     */
    @RequestMapping(value="/jobScreen.htm", method=RequestMethod.GET)
    protected ModelAndView jobScreen(@RequestParam("id") int id) {
        Job job = jobService.getJob(id);
        ModelAndView mv = new ModelAndView("jobScreen");
        mv.addObject("job", job);
        return mv;
    }

    /**
     * POST method to add a job to the database.
     * @param job Job entity to insert, an ID will be created for the job.
     * @param result Validation results.
     * @return The user back to the input job form on a validation error or to
     * the view of the inserted job.
     */
    @RequestMapping(value="/initForm.htm", method=RequestMethod.POST)
    public String addJob(@Valid @ModelAttribute("command") Job job, BindingResult result) {
        if (result.hasErrors()) {
            return "inputJob";
        }

        if (job.getId() != 0) {
            result.addError(new FieldError("command", "id", "Attempt to overwrite an existing job, ID should be 0 and autogenerated by the server"));
            return "inputJob";
        }

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        String username = auth.getName();
        Company company = companyService.getCompany(job.getCompanyId());
        if (company == null) {
            result.addError(new FieldError("", "company", "Company not provided or not valid"));
            return "inputJob";
        }
        if (!company.getCreateUser().equals(username)) {
            result.addError(new FieldError("", "company", "You cannot create a job against this company because you did not create the company"));
            return "inputJob";
        }
        job.setCreateUser(username);
        jobService.saveJob(job);
        return "redirect:jobScreen.htm?id=" + job.getId();
    }

    /**
     * Mapping for providing the form for the user to add a new job.
     * @return ModelAndView of the input form.
     */
    @RequestMapping(value="/inputJob.htm")
    protected ModelAndView inputJobs() {
        ModelAndView mv = new ModelAndView("inputJob", "command", new Job());
        return mv;
    }
}
